
/**
 * @file    Engine\AsmDraw.c
 * @author  Yvan Burrie
 * @date    2018/08/11
 * @version 1.0
 */

#ifndef ASM_DRAW_H
    #include "AsmDraw.h"
#endif

#ifndef ASM_DRAW_C
    #define ASM_DRAW_C
#endif

/**
 *
 */
int ASM_Fast_Count;

/**
 * @brief The current display offsets from a draw-area.
 *
 * dword_88C000 (ROR)
 *
 * AKA: DisplayOffsets
 */
void **ASMRenderOffsets;

/**
 * dword_88C004 (ROR)
 */
static VSpan_Node **ASMLineHeadPtrs;

/**
 * dword_88C008 (ROR)
 */
static VSpan_Node **ASMLineTailPtrs;

/**
 * dword_88C014 (ROR)
 */
int ASMCurrentRenderXOffset = 0;

/**
 * dword_88C01C (ROR)
 */
int ASMXlate = 0;

/**
 * dword_88C020 (ROR)
 */
int ASMCurrentRenderYOffset;

/**
 *
 */
int dword_88C02C = 0;

/**
 *
 */
int dword_88C030 = 0;

/**
 *
 */
int dword_88C034 = 0;

/**
 * dword_88C038 (ROR)
 */
static int ASMDrawYOffset;

/**
 * dword_88C03C (ROR)
 */
static VSpan_Node *ASMCurrentLineHead;

/**
 * dword_88C040 (ROR)
 * AKA: XformMask
 */
static int ASMColorXForm1;

static int ASMColorXForm2;

static int ASMColorXForm3;

/**
 * dword_88C044 (ROR)
 * dword_795044 (AOC)
 */
static void *ASMLocation;

/**
 * dword_88C04C (ROR)
 */
static int ASMCurrentLineHeadPx;

/**
 * dword_88C060 (ROR)
 */
int ASMShadowing1A = 0;

/**
 * dword_88C064 (ROR)
 */
int ASMShadowing3A = 0;

/**
 * dword_88C068 (ROR)
 */
int ASMShadowing1B = 0;

/**
 * dword_88C06C (ROR)
 */
int ASMShadowing3B = 0;

/**
 * dword_88C070 (ROR)
 */
int ASMShadowing2A = 0;

/**
 * dword_88C074 (ROR)
 */
int ASMShadowing4A = 0;

/**
 * dword_88C078 (ROR)
 */
int ASMShadowing2B = 0;

/**
 * dword_88C07C (ROR)
 */
int ASMShadowing4B = 0;

/**
 * dword_88C080 (ROR)
 */
static int ASMMinLine;

/**
 * dword_88C084 (ROR)
 */
static int ASMMaxLine;

/**
 * dword_88C088 (ROR)
 */
static int ASMMinSpanPx;

/**
 * dword_88C08C (ROR)
 */
static int ASMMaxSpanPx;

/**
 * dword_7950A0 (AOC)
 */
static void *dword_7950A0;

static int ASMDrawXFinish;
static int ASMDrawYFinish;

static int dword_7950AC;
static void **dword_7950B0;

static int ASMDrawXStart;

static int dword_795028;
static int dword_79500C;
static int dword_795010;

////////////////////////////////////////////////////////////////////////////////////////////////////

#define ASM_JUMP_TO_LOC asm("jmp %0" : "=r" (ASMLocation) : : ); // return ASMLocation();

void SHAPE_DRAW_PROCS( void )
{
    ASM_JUMP_TO_LOC;
};

void sub_563006( char *a1, char *a2 )
{
    *a1 = *a2;

    ASM_JUMP_TO_LOC;
};

////////////////////////////////////////////////////////////////////////////////////////////////////

void ASMSet_Shadowing(
    int a1,
    int a2,
    int a3,
    int a4 )
{
    ASMShadowing1A = a1;
    ASMShadowing1B = a1;
    ASMShadowing2A = a2;
    ASMShadowing2B = a2;
    ASMShadowing3A = a3;
    ASMShadowing3B = a3;
    ASMShadowing4A = a4;
    ASMShadowing4B = a4;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ASMSet_Surface_Info(
    void **DisplayOffsets,
    VSpan_Node **LineHeadPtrs,
    VSpan_Node **LineTailPtrs,
    int MinSpanPx,
    int MinLine,
    int MaxSpanPx,
    int MaxLine )
{
    ASMRenderOffsets = DisplayOffsets;
    ASMLineHeadPtrs  = LineHeadPtrs;
    ASMLineTailPtrs  = LineTailPtrs;
    ASMMinLine       = MinLine;
    ASMMaxLine       = MaxLine;
    ASMMinSpanPx     = MinSpanPx;
    ASMMaxSpanPx     = MaxSpanPx;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ASMSet_Color_Xform( UINT a1 )
{
    asm("push    ebp");
    asm("mov     ebp, esp");
    asm("mov     eax, [ebp+8]");
    asm("mov     cl, al");
    asm("mov     ah, al");
    asm("bswap   eax");
    asm("mov     al, cl");
    asm("mov     ah, cl");
    asm("mov     %0, eax" : "=r" (ASMColorXForm1) : : );
    asm("pop     ebp");
    asm("ret");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * sub_6328A0 (AOC)
 */
void ASMSet_Color_XformEx( UINT a1, UINT a2 )
{
    asm("a1= dword ptr 8");
    asm("a2= dword ptr 12");
    asm("push    ebp");
    asm("mov     ebp, esp");
    asm("mov     eax, [ebp+a1]");
    asm("mov     cl, al");
    asm("mov     ah, al");
    asm("bswap   eax");
    asm("mov     al, cl");
    asm("mov     ah, cl");
    asm("mov     %0, eax" : "=r" (ASMColorXForm2) : : );
    asm("mov     eax, [ebp+a2]");
    asm("mov     cl, al");
    asm("mov     ah, al");
    asm("bswap   eax");
    asm("mov     al, cl");
    asm("mov     ah, cl");
    asm("mov     %0, eax" : "=r" (ASMColorXForm3) : : );
    asm("pop     ebp");
    asm("retn");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int ASMGet_Color_Xform( void )
{
    return ASMColorXForm1;
}

int ASMGet_Color_Xform2( void )
{
    return ASMColorXForm2;
}

int ASMGet_Color_Xform3( void )
{
    return ASMColorXForm3;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ASMSet_Xlate_Table( int ColorTable )
{
    ASMXlate = ColorTable;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

int ASMGet_Xlate_Table( void )
{
    return ASMXlate;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ASMDraw_HLine( int x1, int x2, int y1 )
{
    if( y1 < ASMMinLine ||
        y1 > ASMMaxLine ){
        return;
    }

    int xmax = x1;
    int xmin = x2;

    if( x1 > x2 ){
        xmax = x2;
        xmin = x1;
        x1 = x2;
        x2 = xmin;
    }

    if( xmin < ASMMinSpanPx ||
        xmax > ASMMaxSpanPx ){
        return;
    }
    if( xmax < ASMMinSpanPx ){
        xmax = ASMMinSpanPx;
        x1 = ASMMinSpanPx;
    }
    if( xmin > ASMMaxSpanPx ){
        xmin = ASMMaxSpanPx;
        x2 = ASMMaxSpanPx;
    }

    VSpan_Node *LineHead = ASMLineHeadPtrs[y1];
    if( LineHead == NULL ){
        return;
    }

    ASMCurrentLineHead = ASMLineHeadPtrs[y1];

    int tempx = xmax;

    ASMDrawYOffset = xmin - xmax + 1;

    ASMLocation = &&loc_56C99A;

    ASMCurrentRenderYOffset = (int)ASMRenderOffsets[y1];

    xmax += ASMCurrentRenderYOffset;

    ASMCurrentRenderXOffset = xmax;

    while( xmin >= LineHead->StartPx ){

        if( tempx <= LineHead->EndPx ){
            if( tempx >= LineHead->StartPx &&
                xmin <= LineHead->EndPx ){

                int v8 = ASMDrawYOffset & 127;
                if( ASMDrawYOffset >= 128 ){
                    v8 |= 128;
                }
                //JUMPOUT(__CS__, off_56A700[(byte_56B300[v8] | ASMCurrentRenderXOffset & 3)]);
            }

            ASMCurrentLineHead = LineHead;

            while( true ){

                int v9 = ASMDrawYOffset;

                if( x2 < ASMCurrentLineHead->StartPx ){
                    break;
                }

                if( x1 <= ASMCurrentLineHead->EndPx ){
                    int v10 = 0;
                    if( x1 < ASMCurrentLineHead->StartPx ){
                        v10 = ASMCurrentLineHead->StartPx - x1;
                        v9 = ASMDrawYOffset - v10;
                    }
                    ASMCurrentLineHeadPx = v10;
                    if( x2 > ASMCurrentLineHead->EndPx ){
                        v9 -= x2 - ASMCurrentLineHead->EndPx;
                        ASMLocation = &&loc_56C8FA;
                    }
                    int v11 = v9 & 127;
                    if( v9 >= 128 ){
                        v11 |= 128;
                    }
                    //JUMPOUT(__CS__, off_56A700[(byte_56B300[v11] | (ASMCurrentLineHeadPx + ASMCurrentRenderXOffset) & 3)]);
                }

                loc_56C8FA:
                if( ASMCurrentLineHead->Next == NULL ){
                    break;
                }
                ASMCurrentLineHead = ASMCurrentLineHead->Next;

                ASMLocation = &&loc_56C99A;
            }
            return;
        }

        LineHead = LineHead->Next;
        if( LineHead == NULL ){
            //EscapeDrawHLine:
            loc_56C99A:
            return;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ASMDraw_Sprite(
    SLhape_File_Header *ShapeBase,
    int DrawX,
    int DrawY,
    int DrawW,
    int DrawH,
    int ShapeDataOffsets,
    int ShapeLineOffsets,
    int DrawFlag )
{

    asm("arg_0    = dword	ptr  8");
    asm("arg_4    = dword	ptr  0Ch");
    asm("arg_8    = dword	ptr  10h");
    asm("arg_C    = dword	ptr  14h");
    asm("arg_10    = dword	ptr  18h");
    asm("arg_14    = dword	ptr  1Ch");
    asm("arg_18    = dword	ptr  20h");
    asm("arg_1C    = dword	ptr  24h");

    asm("push	ebp");
    asm("mov	ebp, esp");
    asm("push	ebx");
    asm("push	esi");
    asm("push	edi");
    asm("mov	eax, [ebp+arg_8]");
    asm("mov	ecx, [ebp+arg_10]");
    asm("xor	edx, edx");
    asm("lea	ebx, [ecx+eax-1]");
    asm("cmp	ebx, ds:ASMMinLine");
    asm("jl	loc_6336D4");
    asm("cmp	eax, ds:ASMMaxLine");
    asm("jg	loc_6336D4");
    asm("cmp	eax, ds:ASMMinLine");
    asm("jge	short loc_632C04");
    asm("mov	edx, ds:ASMMinLine");
    asm("sub	edx, eax");
    asm("xor	eax, eax");
    asm("sub	ecx, edx");
    asm("shl	edx, 2");
    asm("mov	[ebp+arg_8], eax");

    asm("loc_632C04:");
    asm("cmp	ebx, ds:ASMMaxLine");
    asm("jle	short loc_632C14");
    asm("sub	ebx, ds:ASMMaxLine");
    asm("sub	ecx, ebx");

    asm("loc_632C14:");
    asm("mov	[ebp+arg_10], ecx");
    asm("xor	ebx, ebx");
    asm("mov	ds:ASMDrawYOffset, ebx");
    asm("mov	eax, [ebp+arg_4]");
    asm("mov	ds:ASMDrawXStart, eax");
    asm("cmp	eax, ds:ASMMaxSpanPx");
    asm("jg	loc_6336D4");
    asm("add	eax, [ebp+arg_C]");
    asm("dec	eax");
    asm("mov	ds:dword_795028, eax");
    asm("cmp	eax, ds:ASMMinSpanPx");
    asm("jl	loc_6336D4");
    asm("mov	eax, [ebp+arg_14]");
    asm("add	eax, [ebp+arg_0]");
    asm("add	eax, edx");
    asm("mov	ds:dword_79500C, eax");
    asm("mov	eax, [ebp+arg_18]");
    asm("add	eax, [ebp+arg_0]");
    asm("add	eax, edx");
    asm("mov	ds:dword_795010, eax");
    asm("mov	eax, [ebp+arg_1C]");
    asm("xor	ecx, ecx");
    asm("test	eax, 1");
    asm("jz	short loc_632C75");
    asm("mov	ecx, 80h");
    asm("jmp	short loc_632C91");

    asm("loc_632C75:");
    asm("mov	ebx, ds:ASMColorXForm1");
    asm("mov	ds:dword_88C030, ecx");
    asm("mov	ds:dword_88C02C, 0FFFFFFFFh");
    asm("mov	ds:dword_795034, ebx");

    asm("loc_632C91:");
    asm("mov	ds:dword_795048, ecx");
    asm("test	eax, 2");
    asm("jnz	loc_6336E0");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");
    asm("db	2Eh");
    asm("mov	eax, eax");

    asm("loc_632CC0:");
    asm("mov	eax, [ebp+arg_8]");
    asm("mov	ebx, ds:ASMDrawYOffset");
    asm("add	eax, ebx");
    asm("mov	esi, ds:ASMLineHeadPtrs");
    asm("mov	edi, [esi+eax*4]");
    asm("or	    edi, edi");
    asm("jz	    loc_6336C0");
    asm("mov	ds:ASMCurrentLineHead, edi");
    asm("mov	ecx, ds:ASMColorXForm2");
    asm("mov	ds:ASMColorXForm1, ecx");
    asm("test	byte ptr ds:dword_795048, 80h");
    asm("jz	    short loc_632D22");
    asm("and	eax, 3");
    asm("mov	edx, ds:ASMShadowing2A[eax*4]");
    asm("mov	ecx, ds:ASMShadowing1A[eax*4]");
    asm("mov	eax, ds:ASMColorXForm1");
    asm("mov	ds:dword_88C030, edx");
    asm("mov	ds:dword_88C02C, ecx");
    asm("and	eax, ecx");
    asm("or	    eax, edx");
    asm("mov	ds:dword_795034, eax");

    asm("loc_632D22:");
    asm("mov	esi, ds:dword_795010");
    asm("xor	eax, eax");
    asm("mov	ax, [esi+ebx*4]");
    asm("mov	edx, ds:ASMDrawXStart");
    asm("test	eax, 8000h");
    asm("jnz	loc_6336C0");
    asm("add	edx, eax");
    asm("mov	ax, [esi+ebx*4+2]");
    asm("mov	ecx, ds:dword_795028");
    asm("sub	ecx, eax");
    asm("mov	esi, ds:ASMRenderOffsets");
    asm("mov	eax, [ebp+arg_8]");
    asm("add	eax, ebx");
    asm("mov	eax, [esi+eax*4]");
    asm("mov	ds:ASMCurrentRenderYOffset, eax");
    asm("add	eax, edx");
    asm("mov	ds:ASMCurrentRenderXOffset, eax");
    asm("mov	esi, ds:dword_79500C");
    asm("mov	eax, [esi+ebx*4]");
    asm("add	eax, [ebp+arg_0]");
    asm("mov	ds:dword_795018, eax");

    asm("loc_632D79:");
    asm("cmp	ecx, [edi+8]");
    asm("jl	    loc_6336C0");
    asm("cmp	edx, [edi+0Ch]");
    asm("jle	short loc_632D92");
    asm("mov	edi, [edi]");
    asm("or	    edi, edi");
    asm("jnz	short loc_632D79");
    asm("jmp	loc_6336C0");

    asm("loc_632D92:");
    asm("cmp	edx, [edi+8]");
    asm("jl	    short loc_632DB7");
    asm("cmp	ecx, [edi+0Ch]");
    asm("jg	    short loc_632DB7");
    asm("mov	eax, offset loc_6333C0");
    asm("mov	ds:ASMLocation,	eax");
    asm("mov	edi, ds:ASMCurrentRenderXOffset");
    asm("mov	esi, ds:dword_795018");
    asm("jmp	loc_6333C0");

    asm("loc_632DB7:");
    asm("mov	eax, offset loc_632E40");
    asm("mov	ds:ASMLocation,	eax");
    asm("mov	ds:ASMCurrentLineHead, edi");
    asm("mov	edi, ds:ASMCurrentRenderXOffset");
    asm("mov	esi, ds:dword_795018");
    asm("jmp	loc_632E40");
    asm("align 10h");

    asm("loc_632DE0:");
    asm("mov	esi, ds:dword_795050");
    asm("mov	edi, ds:dword_795054");
    asm("mov	ebx, ds:ASMCurrentLineHead");
    asm("mov	ebx, [ebx]");
    asm("or	    ebx, ebx");
    asm("jz	    loc_6336C0");
    asm("mov	ds:ASMLocation,	offset loc_632E40");
    asm("xor	eax, eax");
    asm("mov	al, [esi]");
    asm("sub	edi, ds:ASMCurrentRenderYOffset");
    asm("mov	ecx, eax");
    asm("inc	esi");
    asm("and	eax, 0Fh");
    asm("mov	ds:ASMCurrentLineHead, ebx");
    asm("jmp	ds:off_631400[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_632E40:");
    asm("mov	ds:dword_795050, esi");
    asm("xor	eax, eax");
    asm("mov	ds:dword_795054, edi");
    asm("mov	al, [esi]");
    asm("sub	edi, ds:ASMCurrentRenderYOffset");
    asm("mov	ecx, eax");
    asm("inc	esi");
    asm("and	eax, 0Fh");
    asm("mov	ebx, ds:ASMCurrentLineHead");
    asm("jmp	ds:off_631400[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_632E80:");
    asm("mov	eax, ecx");
    asm("shr	eax, 4");
    asm("jmp	ds:off_631480[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_632EA0:");
    asm("shr	ecx, 2");
    asm("jmp	short loc_632EAB");

    asm("loc_632EA5:");
    asm("shl	ecx, 4");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_632EAB:");
    asm("mov	edx, edi");
    asm("add	edx, ecx");
    asm("dec	edx");

    asm("loc_632EB0:");
    asm("cmp	edx, [ebx+8]");
    asm("jl	short loc_632F12");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jg	short loc_632F21");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+8]");
    asm("jge	short loc_632ECA");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edi");
    asm("add	esi, eax");
    asm("sub	ecx, eax");

    asm("loc_632ECA:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jle	short loc_632EE5");
    asm("mov	eax, edx");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	offset loc_632DE0");

    asm("loc_632EE5:");
    asm("mov	edi, ds:dword_795054");
    asm("xor	ebx, ebx");
    asm("add	edi, ds:ASMCurrentLineHeadPx");
    asm("sub	bl, ch");
    asm("mov	eax, edi");
    asm("and	bl, 80h");
    asm("and	eax, 3");
    asm("or	bl, cl");
    asm("or	al, byte ptr ds:dword_795048");
    asm("or	al, ds:byte_631300[ebx]");
    asm("jmp	ds:off_630300[eax*4]");

    asm("loc_632F12:");
    asm("mov	edi, ds:dword_795054");
    asm("add	esi, ecx");
    asm("add	edi, ecx");
    asm("jmp	loc_632E40");

    asm("loc_632F21:");
    asm("mov	ebx, [ebx]");
    asm("or	ebx, ebx");
    asm("jnz	short loc_632EB0");
    asm("jmp	loc_6336C0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_632F40:");
    asm("shr	ecx, 2");
    asm("mov	edi, ds:dword_795054");
    asm("add	edi, ecx");
    asm("jmp	ds:ASMLocation");

    asm("loc_632F51:");
    asm("shl	ecx, 4");
    asm("mov	edi, ds:dword_795054");
    asm("mov	cl, [esi]");
    asm("inc	esi");
    asm("add	edi, ecx");
    asm("jmp	ds:ASMLocation");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_632F80:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_632F88");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_632F88:");
    asm("mov	edx, edi");
    asm("add	edx, ecx");
    asm("dec	edx");

    asm("loc_632F8D:");
    asm("cmp	edx, [ebx+8]");
    asm("jl	short loc_632FEC");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jg	short loc_632FFB");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+8]");
    asm("jge	short loc_632FA7");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edi");
    asm("add	esi, eax");
    asm("sub	ecx, eax");

    asm("loc_632FA7:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jle	short loc_632FC2");
    asm("mov	eax, edx");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	offset loc_632DE0");

    asm("loc_632FC2:");
    asm("mov	edi, ds:dword_795054");
    asm("add	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMColorXForm1");
    asm("or	al, byte ptr ds:dword_795048");
    asm("jmp	ds:off_630B00[eax*4]");

    asm("loc_632FEC:");
    asm("mov	edi, ds:dword_795054");
    asm("add	esi, ecx");
    asm("add	edi, ecx");
    asm("jmp	loc_632E40");

    asm("loc_632FFB:");
    asm("mov	ebx, [ebx]");
    asm("or	ebx, ebx");
    asm("jnz	short loc_632F8D");
    asm("jmp	loc_6336C0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633020:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633028");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633028:");
    asm("mov	edx, edi");
    asm("add	edx, ecx");
    asm("dec	edx");

    asm("loc_63302D:");
    asm("cmp	edx, [ebx+8]");
    asm("jl	short loc_63309C");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jg	short loc_6330AA");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+8]");
    asm("jge	short loc_633045");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edi");
    asm("sub	ecx, eax");

    asm("loc_633045:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jle	short loc_633060");
    asm("mov	eax, edx");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	offset loc_632DE0");

    asm("loc_633060:");
    asm("mov	edi, ds:dword_795054");
    asm("mov	al, [esi]");
    asm("add	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	ah, al");
    asm("mov	ebx, edi");
    asm("shl	eax, 10h");
    asm("and	ebx, 3");
    asm("mov	al, [esi]");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("mov	ah, al");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("and	eax, ds:dword_88C02C");
    asm("or	eax, ds:dword_88C030");
    asm("inc	esi");
    asm("jmp	ds:off_630700[ebx*4]");

    asm("loc_63309C:");
    asm("mov	edi, ds:dword_795054");
    asm("inc	esi");
    asm("add	edi, ecx");
    asm("jmp	loc_632E40");

    asm("loc_6330AA:");
    asm("mov	ebx, [ebx]");
    asm("or	ebx, ebx");
    asm("jnz	loc_63302D");
    asm("jmp	loc_6336C0");
    asm("align 10h");

    asm("loc_6330C0:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_6330C8");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_6330C8:");
    asm("mov	edx, edi");
    asm("add	edx, ecx");
    asm("dec	edx");

    asm("loc_6330CD:");
    asm("cmp	edx, [ebx+8]");
    asm("jl	short loc_63313C");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jg	short loc_63314A");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+8]");
    asm("jge	short loc_6330E5");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edi");
    asm("sub	ecx, eax");

    asm("loc_6330E5:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jle	short loc_633100");
    asm("mov	eax, edx");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	offset loc_632DE0");

    asm("loc_633100:");
    asm("mov	edi, ds:dword_795054");
    asm("mov	al, [esi]");
    asm("add	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	ah, al");
    asm("mov	ebx, edi");
    asm("shl	eax, 10h");
    asm("and	ebx, 3");
    asm("mov	al, [esi]");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("mov	ah, al");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("inc	esi");
    asm("and	eax, ds:dword_88C02C");
    asm("or	eax, ds:dword_795034");
    asm("jmp	ds:off_630700[ebx*4]");

    asm("loc_63313C:");
    asm("mov	edi, ds:dword_795054");
    asm("inc	esi");
    asm("add	edi, ecx");
    asm("jmp	loc_632E40");

    asm("loc_63314A:");
    asm("mov	ebx, [ebx]");
    asm("or	ebx, ebx");
    asm("jnz	loc_6330CD");
    asm("jmp	loc_6336C0");
    asm("align 10h");

    asm("loc_633160:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633168");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633168:");
    asm("mov	edx, edi");
    asm("add	edx, ecx");
    asm("dec	edx");

    asm("loc_63316D:");
    asm("cmp	edx, [ebx+8]");
    asm("jl	short loc_6331CC");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jg	short loc_6331D9");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+8]");
    asm("jge	short loc_633185");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edi");
    asm("sub	ecx, eax");

    asm("loc_633185:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jle	short loc_6331A0");
    asm("mov	eax, edx");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	offset loc_632DE0");

    asm("loc_6331A0:");
    asm("mov	edi, ds:dword_795054");
    asm("add	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("xor	edx, edx");
    asm("or	al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMXlate");
    asm("or	al, byte ptr ds:dword_795048");
    asm("jmp	ds:off_630F00[eax*4]");

    asm("loc_6331CC:");
    asm("mov	edi, ds:dword_795054");
    asm("add	edi, ecx");
    asm("jmp	loc_632E40");

    asm("loc_6331D9:");
    asm("mov	ebx, [ebx]");
    asm("or	ebx, ebx");
    asm("jnz	short loc_63316D");
    asm("jmp	loc_6336C0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633200:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795098");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 2");
    asm("jmp	short loc_63326A");

    asm("loc_633216:");
    asm("mov	eax, ds:dword_795098");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 2");
    asm("jmp	short loc_63326A");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633240:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795094");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 1");
    asm("jmp	short loc_63326A");

    asm("loc_633256:");
    asm("mov	eax, ds:dword_795094");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 1");

    asm("loc_63326A:");
    asm("test	ds:dword_79509C, eax");
    asm("jz	short loc_6332DF");
    asm("mov	edx, edi");
    asm("add	edx, ecx");
    asm("dec	edx");

    asm("loc_633277:");
    asm("cmp	edx, [ebx+8]");
    asm("jl	short loc_6332DF");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jg	short loc_6332EC");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+8]");
    asm("jge	short loc_63328F");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edi");
    asm("sub	ecx, eax");

    asm("loc_63328F:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jle	short loc_6332AA");
    asm("mov	eax, edx");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	offset loc_632DE0");

    asm("loc_6332AA:");
    asm("mov	edi, ds:dword_795054");
    asm("mov	eax, ds:dword_795090");
    asm("add	edi, ds:ASMCurrentLineHeadPx");
    asm("and	eax, ds:dword_88C02C");
    asm("mov	ebx, edi");
    asm("or	eax, ds:dword_88C030");
    asm("and	ebx, 3");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("jmp	ds:off_630700[ebx*4]");

    asm("loc_6332DF:");
    asm("mov	edi, ds:dword_795054");
    asm("add	edi, ecx");
    asm("jmp	loc_632E40");

    asm("loc_6332EC:");
    asm("mov	ebx, [ebx]");
    asm("or	ebx, ebx");
    asm("jnz	short loc_633277");
    asm("jmp	loc_6336C0");
    asm("align 10h");

    asm("loc_633300:");
    asm("call	sub_634100");
    asm("add	edi, ecx");
    asm("jmp	loc_632E40");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633320:");
    asm("mov	eax, ds:ASMColorXForm2");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("int	3    ; Trap to Debugger");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_632E40");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633360:");
    asm("mov	eax, ds:ASMColorXForm3");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("int	3    ; Trap to Debugger");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_632E40");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    /* TODO */
    asm("byte_6333A0	db 0CCh");
    asm("jmp	loc_632E40");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_6333C0:");
    asm("xor	eax, eax");
    asm("mov	al, [esi]");
    asm("mov	ecx, eax");
    asm("and	eax, 0Fh");
    asm("inc	esi");
    asm("jmp	ds:off_631440[eax*4]");
    asm("align 10h");

    asm("loc_6333E0:");
    asm("mov	eax, ecx");
    asm("shr	eax, 4");
    asm("jmp	ds:off_6314C0[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633400:");
    asm("shr	ecx, 2");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("or	al, byte ptr ds:dword_795048");
    asm("jmp	ds:off_630300[eax*4]");
    asm("align 10h");

    asm("loc_633420:");
    asm("shl	ecx, 4");
    asm("xor	ebx, ebx");
    asm("mov	cl, [esi]");
    asm("sub	bl, ch");
    asm("mov	eax, edi");
    asm("and	bl, 80h");
    asm("and	eax, 3");
    asm("or	bl, cl");
    asm("or	al, byte ptr ds:dword_795048");
    asm("or	al, ds:byte_631300[ebx]");
    asm("inc	esi");
    asm("jmp	ds:off_630300[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633460:");
    asm("shr	ecx, 2");
    asm("add	edi, ecx");
    asm("jmp	ds:ASMLocation");

    asm("loc_63346B:");
    asm("shl	ecx, 4");
    asm("mov	cl, [esi]");
    asm("inc	esi");
    asm("add	edi, ecx");
    asm("jmp	ds:ASMLocation");
    asm("align 10h");

    asm("loc_633480:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633488");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633488:");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMColorXForm1");
    asm("or	al, byte ptr ds:dword_795048");
    asm("jmp	ds:off_630B00[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_6334C0:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_6334C8");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_6334C8:");
    asm("mov	al, [esi]");
    asm("mov	ebx, edi");
    asm("mov	ah, al");
    asm("and	ebx, 3");
    asm("shl	eax, 10h");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("mov	al, [esi]");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("inc	esi");
    asm("mov	ah, al");
    asm("and	eax, ds:dword_88C02C");
    asm("or	eax, ds:dword_88C030");
    asm("jmp	ds:off_630700[ebx*4]");
    asm("align 10h");

    asm("loc_633500:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633508");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633508:");
    asm("mov	al, [esi]");
    asm("mov	ebx, edi");
    asm("mov	ah, al");
    asm("and	ebx, 3");
    asm("shl	eax, 10h");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("mov	al, [esi]");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("inc	esi");
    asm("mov	ah, al");
    asm("and	eax, ds:dword_88C02C");
    asm("or	eax, ds:dword_795034");
    asm("jmp	ds:off_630700[ebx*4]");
    asm("align 10h");

    asm("loc_633540:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633548");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633548:");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMXlate");
    asm("or	al, byte ptr ds:dword_795048");
    asm("xor	edx, edx");
    asm("jmp	ds:off_630F00[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633580:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795098");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 2");
    asm("jmp	short loc_6335EA");

    asm("loc_633596:");
    asm("mov	eax, ds:dword_795098");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 2");
    asm("jmp	short loc_6335EA");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_6335C0:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795094");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 1");
    asm("jmp	short loc_6335EA");

    asm("loc_6335D6:");
    asm("mov	eax, ds:dword_795094");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 1");

    asm("loc_6335EA:");
    asm("test	ds:dword_79509C, eax");
    asm("jz	short loc_63361B");
    asm("mov	eax, ds:dword_795090");
    asm("mov	ebx, edi");
    asm("and	eax, ds:dword_88C02C");
    asm("and	ebx, 3");
    asm("or	eax, ds:dword_88C030");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("jmp	ds:off_630700[ebx*4]");

    asm("loc_63361B:");
    asm("add	edi, ecx");
    asm("jmp	ds:ASMLocation");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633640:");
    asm("call	sub_634100");
    asm("add	edi, ecx");
    asm("jmp	loc_6333C0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633660:");
    asm("mov	eax, ds:ASMColorXForm2");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_6333C0");

    asm("loc_633680:");
    asm("mov	eax, ds:ASMColorXForm3");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_6333C0");

    /* TODO */
    asm("byte_6336A0	db 0CCh");
    asm("jmp	loc_632E40");

    /* TODO */
    asm("byte_6336A6	db 0CCh");
    asm("jmp	ds:ASMLocation");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_6336C0:");
    asm("mov	eax, ds:ASMDrawYOffset");
    asm("inc	eax");
    asm("mov	ds:ASMDrawYOffset, eax");
    asm("cmp	eax, [ebp+arg_10]");
    asm("jl	loc_632CC0");

    asm("loc_6336D4:");
    asm("pop	edi");
    asm("pop	esi");
    asm("pop	ebx");
    asm("pop	ebp");
    asm("retn");
    asm("align 10h");

    asm("loc_6336E0:");
    asm("mov	eax, [ebp+arg_8]");
    asm("mov	ebx, ds:ASMDrawYOffset");
    asm("add	eax, ebx");
    asm("mov	esi, ds:ASMLineTailPtrs");
    asm("mov	edi, [esi+eax*4]");
    asm("or	edi, edi");
    asm("jz	loc_6340E0");
    asm("mov	ds:ASMCurrentLineHead, edi");
    asm("mov	ecx, ds:ASMColorXForm2");
    asm("mov	ds:ASMColorXForm1, ecx");
    asm("test	byte ptr ds:dword_795048, 80h");
    asm("jz	short loc_633742");
    asm("and	eax, 3");
    asm("mov	edx, ds:ASMShadowing2A[eax*4]");
    asm("mov	ecx, ds:ASMShadowing1A[eax*4]");
    asm("mov	eax, ds:ASMColorXForm1");
    asm("mov	ds:dword_88C030, edx");
    asm("mov	ds:dword_88C02C, ecx");
    asm("and	eax, ecx");
    asm("or	eax, edx");
    asm("mov	ds:dword_795034, eax");

    asm("loc_633742:");
    asm("mov	esi, ds:dword_795010");
    asm("xor	eax, eax");
    asm("mov	ax, [esi+ebx*4+2]");
    asm("mov	edx, ds:ASMDrawXStart");
    asm("test	eax, 8000h");
    asm("jnz	loc_6340E0");
    asm("add	edx, eax");
    asm("mov	ax, [esi+ebx*4]");
    asm("mov	ecx, ds:dword_795028");
    asm("sub	ecx, eax");
    asm("mov	esi, ds:ASMRenderOffsets");
    asm("mov	eax, [ebp+arg_8]");
    asm("add	eax, ebx");
    asm("mov	eax, [esi+eax*4]");
    asm("mov	ds:ASMCurrentRenderYOffset, eax");
    asm("add	eax, ecx");
    asm("mov	ds:ASMCurrentRenderXOffset, eax");
    asm("mov	esi, ds:dword_79500C");
    asm("mov	eax, [esi+ebx*4]");
    asm("add	eax, [ebp+arg_0]");
    asm("mov	ds:dword_795018, eax");

    asm("loc_633799:");
    asm("cmp	edx, [edi+0Ch]");
    asm("jg	loc_6340E0");
    asm("cmp	ecx, [edi+8]");
    asm("jge	short loc_6337B3");
    asm("mov	edi, [edi+4]");
    asm("or	edi, edi");
    asm("jnz	short loc_633799");
    asm("jmp	loc_6340E0");

    asm("loc_6337B3:");
    asm("cmp	edx, [edi+8]");
    asm("jl	short loc_6337D5");
    asm("cmp	ecx, [edi+0Ch]");
    asm("jg	short loc_6337D5");
    asm("mov	eax, offset loc_633800");
    asm("mov	ds:ASMLocation,	eax");
    asm("mov	edi, ds:ASMCurrentRenderXOffset");
    asm("mov	esi, ds:dword_795018");
    asm("jmp	short loc_633800");

    asm("loc_6337D5:");
    asm("mov	eax, offset loc_633BA0");
    asm("mov	ds:ASMLocation,	eax");
    asm("mov	ds:ASMCurrentLineHead, edi");
    asm("mov	edi, ds:ASMCurrentRenderXOffset");
    asm("mov	esi, ds:dword_795018");
    asm("jmp	loc_633BA0");
    asm("align 10h");

    asm("loc_633800:");
    asm("xor	eax, eax");
    asm("mov	al, [esi]");
    asm("mov	ecx, eax");
    asm("and	eax, 0Fh");
    asm("inc	esi");
    asm("jmp	ds:off_631540[eax*4]");
    asm("align 10h");

    asm("loc_633820:");
    asm("mov	eax, ecx");
    asm("shr	eax, 4");
    asm("jmp	ds:off_6315C0[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633840:");
    asm("shr	ecx, 2");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("or	al, byte ptr ds:dword_795048");
    asm("jmp	ds:off_631600[eax*4]");
    asm("align 10h");

    asm("loc_633860:");
    asm("shl	ecx, 4");
    asm("xor	ebx, ebx");
    asm("mov	cl, [esi]");
    asm("sub	bl, ch");
    asm("mov	eax, edi");
    asm("and	bl, 80h");
    asm("and	eax, 3");
    asm("or	bl, cl");
    asm("or	al, byte ptr ds:dword_795048");
    asm("or	al, ds:byte_631300[ebx]");
    asm("inc	esi");
    asm("jmp	ds:off_631600[eax*4] ; jumptable 0063410A cases	0,4,8,12");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_6338A0:");
    asm("shr	ecx, 2");
    asm("sub	edi, ecx");
    asm("jmp	ds:ASMLocation");

    asm("loc_6338AB:");
    asm("shl	ecx, 4");
    asm("mov	cl, [esi]");
    asm("inc	esi");
    asm("sub	edi, ecx");
    asm("jmp	ds:ASMLocation");
    asm("align 10h");

    asm("loc_6338C0:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_6338C8");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_6338C8:");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMColorXForm1");
    asm("or	al, byte ptr ds:dword_795048");
    asm("jmp	ds:off_631E00[eax*4] ; jumptable 0063410A cases	0,4,8,12");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633900:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633908");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633908:");
    asm("mov	al, [esi]");
    asm("mov	ebx, edi");
    asm("mov	ah, al");
    asm("and	ebx, 3");
    asm("shl	eax, 10h");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("mov	al, [esi]");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("inc	esi");
    asm("mov	ah, al");
    asm("and	eax, ds:dword_88C02C");
    asm("or	eax, ds:dword_88C030");
    asm("jmp	ds:off_631A00[ebx*4]");
    asm("align 10h");

    asm("loc_633940:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633948");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633948:");
    asm("mov	al, [esi]");
    asm("mov	ebx, edi");
    asm("mov	ah, al");
    asm("and	ebx, 3");
    asm("shl	eax, 10h");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("mov	al, [esi]");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("inc	esi");
    asm("mov	ah, al");
    asm("and	eax, ds:dword_88C02C");
    asm("or	eax, ds:dword_795034");
    asm("jmp	ds:off_631A00[ebx*4]");
    asm("align 10h");

    asm("loc_633980:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633988");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633988:");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMXlate");
    asm("or	al, byte ptr ds:dword_795048");
    asm("xor	edx, edx");
    asm("jmp	ds:off_632200[eax*4] ; jumptable 0063410A cases	0,4,8,12");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_6339C0:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795098");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 2");
    asm("jmp	short loc_633A2A");

    asm("loc_6339D6:");
    asm("mov	eax, ds:dword_795098");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 2");
    asm("jmp	short loc_633A2A");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633A00:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795094");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 1");
    asm("jmp	short loc_633A2A");

    asm("loc_633A16:");
    asm("mov	eax, ds:dword_795094");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 1");

    asm("loc_633A2A:");
    asm("test	ds:dword_79509C, eax");
    asm("jz	short loc_633A5B");
    asm("mov	eax, ds:dword_795090");
    asm("mov	ebx, edi");
    asm("and	eax, ds:dword_88C02C");
    asm("and	ebx, 3");
    asm("or	eax, ds:dword_88C030");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("jmp	ds:off_631A00[ebx*4]");

    asm("loc_633A5B:");
    asm("sub	edi, ecx");
    asm("jmp	ds:ASMLocation");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633A80:");
    asm("call	sub_634100");
    asm("sub	edi, ecx");
    asm("jmp	loc_633800");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633AA0:");
    asm("mov	eax, ds:ASMColorXForm2");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("int	3    ; Trap to Debugger");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_633800");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633AE0:");
    asm("mov	eax, ds:ASMColorXForm3");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("int	3    ; Trap to Debugger");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_633800");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    /* TODO */
    asm("byte_633B20	db 0CCh");
    asm("jmp	loc_632E40");

    /* TODO */
    asm("a_l_l_l_l_l_l_1	db '.̀.̀.̀.̀.̀.̀.̀.̀̀˵PPy',0");

    asm("mov	edi, ds:dword_795054");
    asm("mov	ebx, ds:ASMCurrentLineHead");
    asm("mov	ebx, [ebx+4]");
    asm("or	ebx, ebx");
    asm("jz	loc_6340E0");
    asm("mov	ds:ASMLocation,	offset loc_633BA0");
    asm("xor	eax, eax");
    asm("mov	al, [esi]");
    asm("sub	edi, ds:ASMCurrentRenderYOffset");
    asm("mov	ecx, eax");
    asm("inc	esi");
    asm("and	eax, 0Fh");
    asm("mov	ds:ASMCurrentLineHead, ebx");
    asm("jmp	ds:off_631500[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633BA0:");
    asm("mov	ds:dword_795050, esi");
    asm("xor	eax, eax");
    asm("mov	ds:dword_795054, edi");
    asm("mov	al, [esi]");
    asm("sub	edi, ds:ASMCurrentRenderYOffset");
    asm("mov	ecx, eax");
    asm("inc	esi");
    asm("and	eax, 0Fh");
    asm("mov	ebx, ds:ASMCurrentLineHead");
    asm("jmp	ds:off_631500[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633BE0:");
    asm("mov	eax, ecx");
    asm("shr	eax, 4");
    asm("jmp	ds:off_631580[eax*4]");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633C00:");
    asm("shr	ecx, 2");
    asm("jmp	short loc_633C0B");

    asm("loc_633C05:");
    asm("shl	ecx, 4");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633C0B:");
    asm("mov	edx, edi");
    asm("sub	edx, ecx");
    asm("inc	edx");

    asm("loc_633C10:");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jg	short loc_633C72");
    asm("cmp	edi, [ebx+8]");
    asm("jl	short loc_633C81");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jle	short loc_633C2A");
    asm("mov	eax, edi");
    asm("sub	eax, [ebx+0Ch]");
    asm("add	esi, eax");
    asm("sub	ecx, eax");

    asm("loc_633C2A:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+8]");
    asm("jge	short loc_633C45");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edx");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	(offset	a_l_l_l_l_l_l_1+1Ah)");

    asm("loc_633C45:");
    asm("mov	edi, ds:dword_795054");
    asm("xor	ebx, ebx");
    asm("sub	edi, ds:ASMCurrentLineHeadPx");
    asm("sub	bl, ch");
    asm("mov	eax, edi");
    asm("and	bl, 80h");
    asm("and	eax, 3");
    asm("or	bl, cl");
    asm("or	al, byte ptr ds:dword_795048");
    asm("or	al, ds:byte_631300[ebx]");
    asm("jmp	ds:off_631600[eax*4] ; jumptable 0063410A cases	0,4,8,12");

    asm("loc_633C72:");
    asm("mov	edi, ds:dword_795054");
    asm("add	esi, ecx");
    asm("sub	edi, ecx");
    asm("jmp	loc_633BA0");

    asm("loc_633C81:");
    asm("mov	ebx, [ebx+4]");
    asm("or	ebx, ebx");
    asm("jnz	short loc_633C10");
    asm("jmp	loc_6340E0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633CA0:");
    asm("shr	ecx, 2");
    asm("mov	edi, ds:dword_795054");
    asm("sub	edi, ecx");
    asm("jmp	ds:ASMLocation");

    asm("loc_633CB1:");
    asm("shl	ecx, 4");
    asm("mov	edi, ds:dword_795054");
    asm("mov	cl, [esi]");
    asm("inc	esi");
    asm("sub	edi, ecx");
    asm("jmp	ds:ASMLocation");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633CE0:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633CE8");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633CE8:");
    asm("mov	edx, edi");
    asm("sub	edx, ecx");
    asm("inc	edx");

    asm("loc_633CED:");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jg	short loc_633D4C");
    asm("cmp	edi, [ebx+8]");
    asm("jl	short loc_633D5B");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jle	short loc_633D07");
    asm("mov	eax, edi");
    asm("sub	eax, [ebx+0Ch]");
    asm("add	esi, eax");
    asm("sub	ecx, eax");

    asm("loc_633D07:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+8]");
    asm("jge	short loc_633D22");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edx");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	(offset	a_l_l_l_l_l_l_1+1Ah)");

    asm("loc_633D22:");
    asm("mov	edi, ds:dword_795054");
    asm("sub	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMColorXForm1");
    asm("or	al, byte ptr ds:dword_795048");
    asm("jmp	ds:off_631E00[eax*4]");

    asm("loc_633D4C:");
    asm("mov	edi, ds:dword_795054");
    asm("add	esi, ecx");
    asm("sub	edi, ecx");
    asm("jmp	loc_633BA0");

    asm("loc_633D5B:");
    asm("mov	ebx, [ebx+4]");
    asm("or	ebx, ebx");
    asm("jnz	short loc_633CED");
    asm("jmp	loc_6340E0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633D80:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633D88");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633D88:");
    asm("mov	edx, edi");
    asm("sub	edx, ecx");
    asm("inc	edx");

    asm("loc_633D8D:");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jg	short loc_633DFC");
    asm("cmp	edi, [ebx+8]");
    asm("jl	short loc_633E0A");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jle	short loc_633DA5");
    asm("mov	eax, edi");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");

    asm("loc_633DA5:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+8]");
    asm("jge	short loc_633DC0");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edx");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	(offset	a_l_l_l_l_l_l_1+1Ah)");

    asm("loc_633DC0:");
    asm("mov	edi, ds:dword_795054");
    asm("mov	al, [esi]");
    asm("sub	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	ah, al");
    asm("mov	ebx, edi");
    asm("shl	eax, 10h");
    asm("and	ebx, 3");
    asm("mov	al, [esi]");
    asm("or	bl, ds:byte_631300[ecx]");
    asm("mov	ah, al");
    asm("or	bl, byte ptr ds:dword_795048");
    asm("and	eax, ds:dword_88C02C");
    asm("or	eax, ds:dword_88C030");
    asm("inc	esi");
    asm("jmp	ds:off_631A00[ebx*4]");

    asm("loc_633DFC:");
    asm("mov	edi, ds:dword_795054");
    asm("inc	esi");
    asm("sub	edi, ecx");
    asm("jmp	loc_633BA0");

    asm("loc_633E0A:");
    asm("mov	ebx, [ebx+4]");
    asm("or	ebx, ebx");
    asm("jnz	loc_633D8D");
    asm("jmp	loc_6340E0");
    asm("align 10h");

    asm("loc_633E20:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633E28");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633E28:");
    asm("mov	edx, edi");
    asm("sub	edx, ecx");
    asm("inc	edx");

    asm("loc_633E2D:");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jg	short loc_633E9C");
    asm("cmp	edi, [ebx+8]");
    asm("jl	short loc_633EAA");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jle	short loc_633E45");
    asm("mov	eax, edi");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");

    asm("loc_633E45:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+8]");
    asm("jge	short loc_633E60");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edx");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	(offset	a_l_l_l_l_l_l_1+1Ah)");

    asm("loc_633E60:");
    asm("mov	edi, ds:dword_795054");
    asm("mov	al, [esi]");
    asm("sub	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	ah, al");
    asm("mov	ebx, edi");
    asm("shl	eax, 10h");
    asm("and	ebx, 3");
    asm("mov	al, [esi]");
    asm("or	    bl, ds:byte_631300[ecx]");
    asm("mov	ah, al");
    asm("or	    bl, byte ptr ds:dword_795048");
    asm("inc	esi");
    asm("and	eax, ds:dword_88C02C");
    asm("or	    eax, ds:dword_795034");
    asm("jmp	ds:off_631A00[ebx*4]");

    asm("loc_633E9C:");
    asm("mov	edi, ds:dword_795054");
    asm("inc	esi");
    asm("sub	edi, ecx");
    asm("jmp	loc_633BA0");

    asm("loc_633EAA:");
    asm("mov	ebx, [ebx+4]");
    asm("or	    ebx, ebx");
    asm("jnz	loc_633E2D");
    asm("jmp	loc_6340E0");
    asm("align 10h");

    asm("loc_633EC0:");
    asm("shr	ecx, 4");
    asm("jnz	short loc_633EC8");
    asm("mov	cl, [esi]");
    asm("inc	esi");

    asm("loc_633EC8:");
    asm("mov	edx, edi");
    asm("sub	edx, ecx");
    asm("inc	edx");

    asm("loc_633ECD:");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jg	    short loc_633F2C");
    asm("cmp	edi, [ebx+8]");
    asm("jl	    short loc_633F39");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jle	short loc_633EE5");
    asm("mov	eax, edi");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");

    asm("loc_633EE5:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+8]");
    asm("jge	short loc_633F00");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edx");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	(offset	a_l_l_l_l_l_l_1+1Ah)");

    asm("loc_633F00:");
    asm("mov	edi, ds:dword_795054");
    asm("sub	edi, ds:ASMCurrentLineHeadPx");
    asm("mov	eax, edi");
    asm("and	eax, 3");
    asm("or	    al, ds:byte_631300[ecx]");
    asm("mov	ebx, ds:ASMXlate");
    asm("or	    al, byte ptr ds:dword_795048");
    asm("xor	edx, edx");
    asm("jmp	ds:off_632200[eax*4]");

    asm("loc_633F2C:");
    asm("mov	edi, ds:dword_795054");
    asm("sub	edi, ecx");
    asm("jmp	loc_633BA0");

    asm("loc_633F39:");
    asm("mov	ebx, [ebx+4]");
    asm("or	    ebx, ebx");
    asm("jnz	short loc_633ECD");
    asm("jmp	loc_6340E0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633F60:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795098");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 2");
    asm("jmp	short loc_633FCA");

    asm("loc_633F76:");
    asm("mov	eax, ds:dword_795098");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 2");
    asm("jmp	short loc_633FCA");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_633FA0:");
    asm("xor	ecx, ecx");
    asm("mov	eax, ds:dword_795094");
    asm("mov	cl, [esi]");
    asm("mov	ds:dword_795090, eax");
    asm("inc	esi");
    asm("mov	eax, 1");
    asm("jmp	short loc_633FCA");

    asm("loc_633FB6:");
    asm("mov	eax, ds:dword_795094");
    asm("mov	ecx, 1");
    asm("mov	ds:dword_795090, eax");
    asm("mov	eax, 1");

    asm("loc_633FCA:");
    asm("test	ds:dword_79509C, eax");
    asm("jz	    short loc_63403F");
    asm("mov	edx, edi");
    asm("sub	edx, ecx");
    asm("inc	edx");

    asm("loc_633FD7:");
    asm("cmp	edx, [ebx+0Ch]");
    asm("jg	    short loc_63403F");
    asm("cmp	edi, [ebx+8]");
    asm("jl	    short loc_63404C");
    asm("xor	eax, eax");
    asm("cmp	edi, [ebx+0Ch]");
    asm("jle	short loc_633FEF");
    asm("mov	eax, edi");
    asm("sub	eax, [ebx+0Ch]");
    asm("sub	ecx, eax");

    asm("loc_633FEF:");
    asm("mov	ds:ASMCurrentLineHeadPx, eax");
    asm("cmp	edx, [ebx+8]");
    asm("jge	short loc_63400A");
    asm("mov	eax, [ebx+8]");
    asm("sub	eax, edx");
    asm("sub	ecx, eax");
    asm("mov	ds:ASMLocation,	(offset	a_l_l_l_l_l_l_1+1Ah)");

    asm("loc_63400A:");
    asm("mov	edi, ds:dword_795054");
    asm("mov	eax, ds:dword_795090");
    asm("sub	edi, ds:ASMCurrentLineHeadPx");
    asm("and	eax, ds:dword_88C02C");
    asm("mov	ebx, edi");
    asm("or	    eax, ds:dword_88C030");
    asm("and	ebx, 3");
    asm("or	    bl, ds:byte_631300[ecx]");
    asm("or	    bl, byte ptr ds:dword_795048");
    asm("jmp	ds:off_631A00[ebx*4]");

    asm("loc_63403F:");
    asm("mov	edi, ds:dword_795054");
    asm("sub	edi, ecx");
    asm("jmp	loc_633BA0");

    asm("loc_63404C:");
    asm("mov	ebx, [ebx+4]");
    asm("or	    ebx, ebx");
    asm("jnz	short loc_633FD7");
    asm("jmp	loc_6340E0");
    asm("align 10h");

    asm("loc_634060:");
    asm("call	sub_634100");
    asm("sub	edi, ecx");
    asm("jmp	loc_633BA0");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_634080:");
    asm("mov	eax, ds:ASMColorXForm2");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_633800");

    asm("loc_6340A0:");
    asm("mov	eax, ds:ASMColorXForm3");
    asm("mov	ds:ASMColorXForm1, eax");
    asm("and	eax, ds:dword_88C02C");
    asm("or	edx, ds:dword_88C030");
    asm("mov	ds:dword_795034, eax");
    asm("jmp	loc_633800");

    /* TODO: wth is this? */
    asm("byte_6340C0	db 0CCh");

    asm("jmp	loc_632E40");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("db 2Eh,	8Bh, 0C0h");
    asm("align 10h");

    asm("loc_6340E0:");
    asm("mov	eax, ds:ASMDrawYOffset");
    asm("inc	eax");
    asm("mov	ds:ASMDrawYOffset, eax");
    asm("cmp	eax, [ebp+arg_10]");
    asm("jl	loc_6336E0");
    asm("pop	edi");
    asm("pop	esi");
    asm("pop	ebx");
    asm("pop	ebp");

    asm("retn");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int sub_634100( void *a1 )
{
    /*
    unsigned int result; // eax@1
    char *v2; // esi@1
    char v3; // cl@3
    char v4; // cl@4
    int v5; // ecx@6
    int v6; // ecx@9
    int v7; // ecx@12

    result = a1;
    v2 = a1 + 1;
    switch ( result )
    {
        case 1u:
        case 5u:
        case 9u:
        case 0xDu:
        case 0xFu:
        case 0u:
        case 4u:
        case 8u:
        case 0xCu:
            return result;
        case 2u:
            v3 = *v2;
            break;
        case 3u:
            v4 = *v2;
            break;
        case 6u:
            if ( !(result >> 4) )
                v5 = *v2;
            break;
        case 7u:
        case 0xAu:
            if ( !(result >> 4) )
                v6 = *v2;
            break;
        case 0xBu:
            if ( !(result >> 4) )
                v7 = *v2;
            break;
        case 0xEu:
            JUMPOUT(__CS__, off_632640[result >> 4]);
            return result;
    }
    return result;
    */
}

/**
 * sub_6341A0 (AOC)
 */
void **sub_6341A0( VSpan_Node *a1, int x, int y )
{
    dword_7950A0 = a1;

    ASMDrawXFinish = x;
    ASMDrawYFinish = y;

    //dword_7950AC = *(a1 + 4) + y - 1;
    //dword_7950B0 = *(a1 + 12);

    return dword_7950B0;
}

int sub_6341E0(
    int ShapeBase,
    int DrawX,
    int DrawY,
    int ShapeSizeX,
    int ShapeSizeY,
    int ShapeDataOffsets,
    int ShapeOutlineOffset,
    char Flag )
{
    /*
    int result; // eax@1
    int v9; // ecx@1
    int v10; // edx@1
    int v11; // ebx@1
    VSpan_Node *v12; // edi@14
    int v13; // edx@15
    int v14; // ecx@15
    int v15; // eax@17
    int v16; // ebx@19
    int v17; // edi@26
    _BYTE *v18; // esi@26
    unsigned int v19; // ecx@27
    VSpan_Node *v20; // ebx@27
    int v21; // ecx@28
    int v22; // ecx@29
    signed int v23; // ecx@31
    int v24; // edx@35
    int v25; // eax@37
    int v26; // eax@40
    int v27; // eax@45
    VSpan_Node *v28; // edi@56
    int v29; // edx@57
    int v30; // ecx@57
    int v31; // eax@59
    int v32; // ebx@61
    int v33; // edi@68
    _BYTE *v34; // esi@68
    unsigned int v35; // ecx@69
    VSpan_Node *v36; // ebx@69
    int v37; // ecx@70
    int v38; // ecx@71
    signed int v39; // ecx@73
    int v40; // edx@77
    int v41; // eax@79
    int v42; // eax@82
    int v43; // eax@87
    int ShapeSizeYa; // [sp+24h] [bp+18h]@9

    result = DrawY;
    v9 = ShapeSizeY;
    v10 = 0;
    v11 = ShapeSizeY + DrawY - 1;
    if ( v11 >= ASMMinLine && DrawY <= ASMMaxLine && v11 >= ASMDrawYFinish && DrawY <= dword_7950AC )
    {
        if ( DrawY < ASMMinLine )
        {
            v9 = ShapeSizeY - (ASMMinLine - DrawY);
            v10 = 4 * (ASMMinLine - DrawY);
            DrawY = 0;
        }
        if ( v11 > ASMMaxLine )
            v9 -= v11 - ASMMaxLine;
        ShapeSizeYa = v9;
        ASMDrawYOffset = 0;
        result = DrawX;
        ASMDrawXStart = DrawX;
        if ( DrawX <= ASMMaxSpanPx )
        {
            result = ShapeSizeX + DrawX - 1;
            dword_795028 = result;
            if ( result >= ASMMinSpanPx )
            {
                dword_79500C = v10 + ShapeBase + ShapeDataOffsets;
                dword_795010 = v10 + ShapeBase + ShapeOutlineOffset;
                if ( Flag & 2 )
                {
                    do
                    {
                        result = ASMDrawYOffset + DrawY;
                        if ( ASMDrawYOffset + DrawY >= ASMDrawYFinish )
                        {
                            if ( result > dword_7950AC )
                                return result;
                            v28 = (dword_7950B0[result - ASMDrawYFinish + 1] - 8);
                            ASMCurrentLineHead = (dword_7950B0[result - ASMDrawYFinish + 1] - 8);
                            HIWORD(result) = 0;
                            if ( !(dword_795010[ASMDrawYOffset] + 2) & 0x8000) )
                            {
                                LOWORD(result) = dword_795010[ASMDrawYOffset] + 2;
                                v29 = result + ASMDrawXStart;
                                LOWORD(result) = dword_795010[ASMDrawYOffset];
                                v30 = dword_795028 - result;
                                ASMCurrentRenderYOffset = ASMRenderOffsets[ASMDrawYOffset + DrawY];
                                ASMCurrentRenderXOffset = dword_795028 - result + ASMCurrentRenderYOffset;
                                dword_795018 = ShapeBase + *(dword_79500C + 4 * ASMDrawYOffset);
                                while ( !(v28->Next & 0x80000000) )
                                {
                                    v31 = v28->Next + ASMDrawXFinish;
                                    if ( v31 < ASMMinSpanPx )
                                        v31 = ASMMinSpanPx;
                                    v32 = v28->Prev + ASMDrawXFinish;
                                    if ( v32 < ASMMinSpanPx )
                                        break;
                                    if ( v31 <= ASMMaxSpanPx )
                                    {
                                        if ( v32 > ASMMaxSpanPx )
                                            v32 = ASMMaxSpanPx;
                                        if ( v29 > v32 )
                                            break;
                                        if ( v30 >= v31 )
                                        {
                                            ASMLocation = &loc_6347A0;
                                            ASMCurrentLineHead = v28;
                                            v33 = ASMCurrentRenderXOffset;
                                            v34 = dword_795018;
LABEL_69:
                                            while ( 2 )
                                            {
                                                dword_795050 = v34;
                                                dword_795054 = v33;
                                                v33 -= ASMCurrentRenderYOffset;
                                                v35 = *v34++;
                                                v36 = ASMCurrentLineHead;
                                                switch ( v35 & 0xF )
                                                {
                                                    case 0u:
                                                    case 1u:
                                                    case 2u:
                                                    case 3u:
                                                    case 4u:
                                                    case 5u:
                                                    case 6u:
                                                    case 7u:
                                                    case 8u:
                                                    case 9u:
                                                    case 0xAu:
                                                    case 0xBu:
                                                    case 0xCu:
                                                    case 0xDu:
LABEL_70:
                                                        sub_634100(--v34);
                                                        v33 = dword_795054 - v37;
                                                        continue;
                                                    case 0xEu:
                                                        switch ( v35 >> 4 )
                                                        {
                                                            case 0u:
                                                                sub_634100(v34);
                                                                v33 = dword_795054 - v38;
                                                                continue;
                                                            case 1u:
                                                                continue;
                                                            case 2u:
                                                            case 3u:
                                                            case 8u:
                                                                goto LABEL_70;
                                                            case 4u:
                                                                v39 = 1;
                                                                dword_795090 = dword_795094;
                                                                break;
                                                            case 5u:
                                                                v39 = *v34;
                                                                dword_795090 = dword_795094;
                                                                ++v34;
                                                                break;
                                                            case 6u:
                                                                v39 = 1;
                                                                dword_795090 = dword_795098;
                                                                break;
                                                            case 7u:
                                                                v39 = *v34;
                                                                dword_795090 = dword_795098;
                                                                ++v34;
                                                                break;
                                                        }
                                                        v40 = v33 - v39 + 1;
                                                        break;
                                                    case 0xFu:
                                                        goto LABEL_94;
                                                }
                                                break;
                                            }
                                            while ( !(v36->Next & 0x4C4B400) )
                                            {
                                                v41 = v36->Next + ASMDrawXFinish;
                                                if ( v41 < ASMMinSpanPx )
                                                    v41 = ASMMinSpanPx;
                                                if ( v41 <= ASMMaxSpanPx )
                                                {
                                                    dword_7950B4 = v41;
                                                    v42 = v36->Prev + ASMDrawXFinish;
                                                    if ( v42 < ASMMinSpanPx )
                                                        goto LABEL_94;
                                                    if ( v42 > ASMMaxSpanPx )
                                                        v42 = ASMMaxSpanPx;
                                                    dword_7950B8 = v42;
                                                    if ( v40 > v42 )
                                                    {
                                                        v33 = dword_795054 - v39;
                                                        goto LABEL_69;
                                                    }
                                                    if ( v33 >= dword_7950B4 )
                                                    {
                                                        v43 = 0;
                                                        if ( v33 > dword_7950B8 )
                                                        {
                                                            v43 = v33 - dword_7950B8;
                                                            v39 -= v33 - dword_7950B8;
                                                        }
                                                        ASMCurrentLineHeadPx = v43;
                                                        if ( v40 < dword_7950B4 )
                                                        {
                                                            v39 -= dword_7950B4 - v40;
                                                            ASMLocation = "‹5PPy";
                                                        }
                                                        JUMPOUT(
                                                            __CS__,
                                                            *(&off_631A00 + (byte_631300[v39] | (dword_795054 - ASMCurrentLineHeadPx) & 3)));
                                                    }
                                                }
                                                v36 = (v36 - 8);
                                            }
                                            break;
                                        }
                                    }
                                    v28 = (v28 - 8);
                                }
                            }
                        }
LABEL_94:
                        result = ASMDrawYOffset + 1;
                        ASMDrawYOffset = result;
                    }
                    while ( result < ShapeSizeYa );
                }
                else
                {
                    do
                    {
                        result = ASMDrawYOffset + DrawY;
                        if ( ASMDrawYOffset + DrawY >= ASMDrawYFinish )
                        {
                            if ( result > dword_7950AC )
                                return result;
                            v12 = (*(dword_7950B0[result - ASMDrawYFinish]) + 8);
                            ASMCurrentLineHead = (*(dword_7950B0[result - ASMDrawYFinish]) + 8);
                            HIWORD(result) = 0;
                            if ( !(dword_795010[ASMDrawYOffset] & 0x8000) )
                            {
                                LOWORD(result) = dword_795010[ASMDrawYOffset];
                                v13 = result + ASMDrawXStart;
                                LOWORD(result) = dword_795010[ASMDrawYOffset] + 2;
                                v14 = dword_795028 - result;
                                ASMCurrentRenderYOffset = ASMRenderOffsets[ASMDrawYOffset + DrawY];
                                ASMCurrentRenderXOffset = v13 + ASMCurrentRenderYOffset;
                                dword_795018 = dword_79500C[ASMDrawYOffset] + ShapeBase;
                                while ( !(v12->Next & 0x80000000) )
                                {
                                    v15 = v12->Next + ASMDrawXFinish;
                                    if ( v15 < ASMMinSpanPx )
                                        v15 = ASMMinSpanPx;
                                    v16 = v12->Prev + ASMDrawXFinish;
                                    if ( v16 >= ASMMinSpanPx )
                                    {
                                        if ( v15 > ASMMaxSpanPx )
                                            break;
                                        if ( v16 > ASMMaxSpanPx )
                                            v16 = ASMMaxSpanPx;
                                        if ( v14 < v15 )
                                            break;
                                        if ( v13 <= v16 )
                                        {
                                            ASMLocation = &loc_634440;
                                            ASMCurrentLineHead = v12;
                                            v17 = ASMCurrentRenderXOffset;
                                            v18 = dword_795018;
LABEL_27:
                                            while ( 2 )
                                            {
                                                dword_795050 = v18;
                                                dword_795054 = v17;
                                                v17 -= ASMCurrentRenderYOffset;
                                                v19 = *v18++;
                                                v20 = ASMCurrentLineHead;
                                                switch ( v19 & 0xF )
                                                {
                                                    case 0u:
                                                    case 1u:
                                                    case 2u:
                                                    case 3u:
                                                    case 4u:
                                                    case 5u:
                                                    case 6u:
                                                    case 7u:
                                                    case 8u:
                                                    case 9u:
                                                    case 0xAu:
                                                    case 0xBu:
                                                    case 0xCu:
                                                    case 0xDu:
LABEL_28:
                                                        sub_634100(--v18);
                                                        v17 = v21 + dword_795054;
                                                        continue;
                                                    case 0xEu:
                                                        switch ( v19 >> 4 )
                                                        {
                                                            case 0u:
                                                                continue;
                                                            case 1u:
                                                                sub_634100(v18);
                                                                v17 = v22 + dword_795054;
                                                                continue;
                                                            case 2u:
                                                            case 3u:
                                                            case 8u:
                                                                goto LABEL_28;
                                                            case 4u:
                                                                v23 = 1;
                                                                dword_795090 = dword_795094;
                                                                break;
                                                            case 5u:
                                                                v23 = *v18;
                                                                dword_795090 = dword_795094;
                                                                ++v18;
                                                                break;
                                                            case 6u:
                                                                v23 = 1;
                                                                dword_795090 = dword_795098;
                                                                break;
                                                            case 7u:
                                                                v23 = *v18;
                                                                dword_795090 = dword_795098;
                                                                ++v18;
                                                                break;
                                                        }
                                                        v24 = v23 + v17 - 1;
                                                        break;
                                                    case 0xFu:
                                                        goto LABEL_52;
                                                }
                                                break;
                                            }
                                            while ( !(v20->Next & 0x4C4B400) )
                                            {
                                                v25 = v20->Next + ASMDrawXFinish;
                                                if ( v25 < ASMMinSpanPx )
                                                    v25 = ASMMinSpanPx;
                                                if ( v25 > ASMMaxSpanPx )
                                                    break;
                                                dword_7950B4 = v25;
                                                v26 = v20->Prev + ASMDrawXFinish;
                                                if ( v26 >= ASMMinSpanPx )
                                                {
                                                    if ( v26 > ASMMaxSpanPx )
                                                        v26 = ASMMaxSpanPx;
                                                    dword_7950B8 = v26;
                                                    if ( v24 < dword_7950B4 )
                                                    {
                                                        v17 = v23 + dword_795054;
                                                        goto LABEL_27;
                                                    }
                                                    if ( v17 <= dword_7950B8 )
                                                    {
                                                        v27 = 0;
                                                        if ( v17 < dword_7950B4 )
                                                        {
                                                            v27 = dword_7950B4 - v17;
                                                            v23 -= dword_7950B4 - v17;
                                                        }
                                                        ASMCurrentLineHeadPx = v27;
                                                        if ( v24 > dword_7950B8 )
                                                        {
                                                            v23 -= v24 - dword_7950B8;
                                                            ASMLocation = "‹5PPy";
                                                        }
                                                        JUMPOUT(__CS__, off_630700[(byte_631300[v23] | (ASMCurrentLineHeadPx + dword_795054) & 3)]);
                                                    }
                                                }
                                                v20 = (v20 + 8);
                                            }
                                            break;
                                        }
                                    }
                                    v12 = (v12 + 8);
                                }
                            }
                        }
LABEL_52:
                        result = ASMDrawYOffset + 1;
                        ASMDrawYOffset = result;
                    }
                    while ( result < ShapeSizeYa );
                }
            }
        }
    }
    return result;
    */
}
